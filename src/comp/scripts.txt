    const camposRegistro ={nombre:"", edad:"", genero:""};
    const [objeto, setObjeto] = useState(camposRegistro);

    const handleStatusChange =(e) => {
        const{name,value} =e.target;
        setObjeto({...objeto, [name]:value});
        console.log(objeto);
    }
    const handleSubmit = async (e) =>{
        e.preventDefault();
        if(props.idActual ===""){
          if(validarForm()){
              addDoc(collection(db, 'persona'), objeto);
              console.log('Se guardó...');
              props.fnRead();
          }else{
              console.log('No se guardó...');    
          }
        }else{
          return false;
        }
        setObjeto(camposRegistro);
        } 
    const validarForm = () => {
        if(objeto.nombre ===""|| /^\s+$/.test(objeto.nombre)){
          alert("Escriba nombres...");
          return false;
        }
        return true;
    };
    useEffect(() =>{
    }, [props.idActual]);
    const obtenerDatosPorId= async (xId) =>{
    }

    <form onSubmit={handleSubmit}>

        <input type="text" name="nombre" placeholder="Nombres..." onChange={handleStatusChange} value={objeto.nombre}/> <br/>
        <input type="text" name="edad" placeholder="Edad..." onChange={handleStatusChange} value={objeto.edad}/> <br/>
        <input type="text" name="genero" placeholder="Genero..." onChange={handleStatusChange} value={objeto.genero}/> <br/>
        <button>
            {props.idActual ===""? "Guardar": "Actualizar"}
        </button>

    </form>


//25/10/23 Codigo Incompleto

  const handleSubmit = (e) =>{
    try{
      e.preventDefault();
      if (props.idActual === ""){
        if(validarForm()){
          addDoc(collection(db, 'persona'), objeto);
          console.log ('Se guardo...');
        }else{
          console.log('No se guardo...');
        }
      }else{
          await updateDoc(doc(collection(db, "persona"), props.idActual), objeto);
          console.log("Se actualizo ...");
          props.setIdActual('');
      }
        setObjeto(camposRegistro);
    } catch (error){
      console.log("Error en CREAR o UPDATE",error);
    }
  }
  const handleStatusChange =(e) => {
    const{name,value} =e.target;
    setObjeto({...objeto, [name]:value});
    console.log(objeto);
  }
  useEffect(() =>{
    if (props.idActual ===""){
        setObjeto({...camposRegistro});
    }else{
        obtenerDatosPorId(props.idActual);
    }
  }, [props.idActual]);
  const obtenerDatosPorId= async (xId) =>{
    const objPorId = doc(db, "persona", xId);
    const docPorId = await getDoc(objPorId);
    if (docPorId.exists()){
      setObjeto (docPorId.data());
    }else{
      console.log("No hay doc...");
    }
  }

31//10//2023 APPJS
import { collection, getDocs, query, doc, deleteDoc, where, onSnapshot } from 'firebase/firestore';
import C01componente from './comp/C01componente';
import C02contador from './comp/C02contador';
import firebase, {db} from  './comp/firebase';
import AppForm from './comp/AppForm.js';